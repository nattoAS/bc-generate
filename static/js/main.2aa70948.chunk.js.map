{"version":3,"sources":["components/ToPrint.js","components/EqualSplit.js","App.js","serviceWorker.js","index.js"],"names":["ToPrint","className","this","props","datas","map","data","key","lot","svg","src","React","Component","EqualSplit","state","onSubmit","e","preventDefault","splitCal","target","elements","event","a","lotText","deliveryQty","lotSize","numberToSplit","Math","ceil","value","result","i","QRCode","toDataURL","type","push","setState","name","placeholder","length","trigger","href","content","componentRef","style","display","ref","el","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SA2BeA,E,iLAvBX,OACE,2BAAOC,UAAU,kBACf,+BACE,oCACA,sCACA,wCAEF,+BACGC,KAAKC,MAAMC,MAAMC,KAAI,SAAAC,GAAI,OACxB,wBAAIC,IAAKD,EAAKC,KACZ,4BAAKD,EAAKC,KACV,4BAAKD,EAAKE,KACV,4BACE,yBAAKD,IAAKD,EAAKG,IAAKC,IAAKJ,EAAKG,iB,GAfxBE,IAAMC,WC+EbC,E,2MA3EbC,MAAQ,CAAEV,MAAO,I,EAEjBW,SAAW,SAAAC,GACTA,EAAEC,iBACF,EAAKC,SAASF,EAAEG,OAAOC,W,EAGzBF,S,uCAAW,WAAMG,GAAN,yBAAAC,EAAA,sDACDC,EAAkCF,EAAlCE,QAASC,EAAyBH,EAAzBG,YAAaC,EAAYJ,EAAZI,QACxBC,EAAgBC,KAAKC,KAAKJ,EAAYK,MAAQJ,EAAQI,OAExDC,EAAS,GACJC,EAAI,EALJ,YAKOA,GAAKL,GALZ,6BAMPI,EANO,KAOAC,EAPA,eAQGR,EAAQM,MARX,YAQoBE,GARpB,UASMC,IAAOC,UAAP,UAAoBV,EAAQM,MAA5B,YAAqCE,GAAK,CACnDG,KAAM,QAVH,0BAOL3B,IAPK,KAQLC,IARK,KASLC,IATK,WAMA0B,KANA,wBAK2BJ,IAL3B,uBAcT,EAAKK,SAAS,CAAEhC,MAAO0B,IAdd,4C,8HAiBD,IAAD,OACP,OACE,yBAAK7B,UAAU,OACb,wBAAIA,UAAU,aACZ,yBAAKA,UAAU,WAAf,gBAEF,0BAAMA,UAAU,UAAUc,SAAUb,KAAKa,UACvC,yBAAKd,UAAU,SACb,4CACA,2BAAOiC,KAAK,OAAOG,KAAK,UAAUC,YAAY,cAEhD,yBAAKrC,UAAU,SACb,gDACA,2BAAOiC,KAAK,OAAOG,KAAK,cAAcC,YAAY,kBAEpD,yBAAKrC,UAAU,SACb,4CACA,2BAAOiC,KAAK,OAAOG,KAAK,UAAUC,YAAY,cAGhD,4BAAQrC,UAAU,YAAYiC,KAAK,UAAnC,UAGA,yBAAKjC,UAAU,OACZC,KAAKY,MAAMV,MAAMmC,OAAS,EACzB,yBAAKtC,UAAU,OACb,kBAAC,IAAD,CACEuC,QAAS,kBACP,4BAAQvC,UAAU,YAAYwC,KAAK,KAAnC,oBAIFC,QAAS,kBAAM,EAAKC,gBAEtB,yBAAKC,MAAO,CAAEC,QAAS,SACrB,kBAAC,EAAD,CACEzC,MAAOF,KAAKY,MAAMV,MAClB0C,IAAK,SAAAC,GAAE,OAAK,EAAKJ,aAAeI,OAKtC,W,GAnEWpC,IAAMC,WCMhBoC,EARH,WACV,OACE,yBAAK/C,UAAU,gBACb,kBAAC,EAAD,QCMcgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2aa70948.chunk.js","sourcesContent":["import React from 'react';\n\nclass ToPrint extends React.Component {\n  render() {\n    return (\n      <table className='ui fixed table'>\n        <thead>\n          <th>Key1</th>\n          <th>Lot No</th>\n          <th>QR CODE</th>\n        </thead>\n        <tbody>\n          {this.props.datas.map(data => (\n            <tr key={data.key}>\n              <td>{data.key}</td>\n              <td>{data.lot}</td>\n              <td>\n                <img key={data.svg} src={data.svg}></img>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default ToPrint;\n","import React from 'react';\nimport QRCode from 'qrcode';\nimport ReactToPrint from 'react-to-print';\nimport ToPrint from './ToPrint';\n\nclass EqualSplit extends React.Component {\n  state = { datas: [] };\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.splitCal(e.target.elements);\n  };\n\n  splitCal = async event => {\n    const { lotText, deliveryQty, lotSize } = event;\n    const numberToSplit = Math.ceil(deliveryQty.value / lotSize.value);\n\n    let result = [];\n    for (let i = 1; i <= numberToSplit; i++) {\n      result.push({\n        key: i,\n        lot: `${lotText.value}-${i}`,\n        svg: await QRCode.toDataURL(`${lotText.value}-${i}`, {\n          type: 'svg'\n        })\n      });\n    }\n    this.setState({ datas: result });\n  };\n\n  render() {\n    return (\n      <div className='row'>\n        <h2 className='ui header'>\n          <div className='content'>Lot Spliter</div>\n        </h2>\n        <form className='ui form' onSubmit={this.onSubmit}>\n          <div className='field'>\n            <label>Lot TEXT:</label>\n            <input type='text' name='lotText' placeholder='LOT TEXT' />\n          </div>\n          <div className='field'>\n            <label>Delevery QTY:</label>\n            <input type='text' name='deliveryQty' placeholder='Delevery QTY' />\n          </div>\n          <div className='field'>\n            <label>Lot size:</label>\n            <input type='text' name='lotSize' placeholder='Lot size' />\n          </div>\n\n          <button className='ui button' type='submit'>\n            Submit\n          </button>\n          <div className='row'>\n            {this.state.datas.length > 0 ? (\n              <div className='row'>\n                <ReactToPrint\n                  trigger={() => (\n                    <button className='ui button' href='#'>\n                      Print this out!\n                    </button>\n                  )}\n                  content={() => this.componentRef}\n                />\n                <div style={{ display: 'none' }}>\n                  <ToPrint\n                    datas={this.state.datas}\n                    ref={el => (this.componentRef = el)}\n                  />\n                </div>\n              </div>\n            ) : (\n              ' '\n            )}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default EqualSplit;\n","import React from 'react';\nimport EqualSplit from './components/EqualSplit';\n\nconst App = () => {\n  return (\n    <div className='ui container'>\n      <EqualSplit />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}